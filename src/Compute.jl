# ===== PRIVATE METHODS BELOW HERE =================================================================================== #
"""
    _decode_part_1(model::MyPuzzleRecordModel)::Int6

Private method that takes a MyPuzzleRecordModel instance, determines the first and last number in the encoded line of text 
and converts it to a single two-digit number

Arguments:
- model::MyPuzzleRecordModel: holds a encoded line of text with the parameters character, len, and record 

Returns: An integer representation of the first and last digits in the encoded line of text 
"""
# returns combination of first and last number the record 
function _decode_part_1(model::MyPuzzleRecordModel)::Int64
    #import character array for the model 
    character = model.characters
    digits = filter(isdigit, character);
    value = Array{Char,1}();

    push!(value, digits[1]);
    push!(value, digits[end]);

    #take value and make it an integer 
    x = value |> join
    integer = parse(Int64, x)
    return integer

end


"""
    _decode_part_2(model::MyPuzzleRecordModel)::Int64

Private method that takes a MyPuzzleRecordModel instance, determines the first and last number in the encoded line of text 
(in either numerical or spelt out representation) and converts it to a single two-digit number

Arguments:
- model::MyPuzzleRecordModel: holds a encoded line of text with the parameters character, len, and record 

Returns: An integer representation of the first and last digits in the encoded line of text 
"""
function _decode_part_2(model::MyPuzzleRecordModel)::Int64
    record = model.record;
    dictionary = Dict("one" => 1, "two" => 2, "three" => 3, "four" => 4, "five" => 5,
    "six" => 6, "seven" => 7, "eight" => 8, "nine" => 9)

    for (word, num) in dictionary
        if occursin(word, record)

            firstchar = word[1] |> string;
            lastchar = word[end] |> string;
            newword = "$(firstchar)$(word)$(lastchar)"
            # Replace the word with the corresponding number
            record = replace(record, word => newword)
            record = replace(record, word => num)
        end
    end

    model.record = record 
    model.characters= collect(record);

    return _decode_part_1(model);


end

# ===== PRIVATE METHODS ABOVE HERE =================================================================================== #

# ===== PUBLIC METHODS BELOW HERE ==================================================================================== #
"""
    decode_part_1(models::Dict{Int64, MyPuzzleRecordModel}) -> Tuple{Int64, Dict{Int64, Int64}}

Takes dictonary containing a line number and a MyPuzzleRecordModel instance of a corresponding encoded line of text and 
returns the hidden sum of each entry in the dictonary based on the first and last numerical values in the line of text 

Arguments:
- models::Dict{Int64, MyPuzzleRecordModel}: the key holds the line number (starting at 1) and the value is a 
MyPuzzleRecordModel instance of the corresponding encoded line of text 

Returns: a touple containing the total sum of each number generated by taking the first and last number in each encoded line 
of text, and a dictonary with a key of the line number (starting at 1) and the value as the two-digit integer created from 
taking the first and last numbers in the encoded line of text 
"""
function decode_part_1(models::Dict{Int64, MyPuzzleRecordModel})::Tuple{Int64, Dict{Int64, Int64}}
    
    # initialize -
    total = 0;
    codes = Dict{Int64, Int64}();
   

    for(line, record) ∈ models

        #call decode 
        codes[line] = _decode_part_1(record);

        #upodate total value 
        total += codes[line];

    end
        
    # return the total -
    return (total, codes);
end

"""
    decode_part_2(models::Dict{Int64, MyPuzzleRecordModel}) -> Tuple{Int64, Dict{Int64, Int64}}

Takes dictonary containing a line number and a MyPuzzleRecordModel instance of a corresponding encoded line of text and 
returns the hidden sum of each entry in the dictonary based on the first and last numerical value or textual representation 
of the numerical value in the encoded line of text. Note: if one letter overlaps in the spelling of two numbers, the letter 
is used to represent both numbers (ex. nineone represents both numbers 9 and 1)

Arguments:
- models::Dict{Int64, MyPuzzleRecordModel}: the key holds the line number (starting at 1) and the value is a 
MyPuzzleRecordModel instance of the corresponding encoded line of text 

Returns: a touple containing the total sum of each number generated by taking the first and last number (either in numerical 
or spelt out form) in each encoded line of text, and a dictonary with a key of the line number (starting at 1) and the value 
as the two-digit integer created from taking the first and last numbers in the encoded line of text 
"""
function decode_part_2(models::Dict{Int64, MyPuzzleRecordModel})::Tuple{Int64, Dict{Int64, Int64}}
     
    # initialize -
    total = 0;
    codes = Dict{Int64, Int64}();

    for(line, record) ∈ models

        #call decode 
        codes[line] = _decode_part_2(record);

        #update total value 
        total += codes[line];

    end

     # return the total -
     return (total, codes);
end
# ===== PUBLIC METHODS ABOVE HERE ==================================================================================== #